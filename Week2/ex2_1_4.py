#%%
import numpy as np
import matplotlib.pyplot as plt
np.random.seed(42)

N = 50 # number of points
mu = 0 # mean value of noise
sig2 = 1 # variance of noise
theta = np.array([0.25, -0.25, 0.25])
x_min = 0  # min value of x for data generation
x_max = 10 # max value of x for data generation

# Data generation
X = np.random.uniform(x_min,x_max,(N,3))
theta = theta[:,np.newaxis]
X[:,0] = 1

# Noise with mean mu and std sigma
eta = np.random.normal(mu, np.sqrt(sig2), (X.shape[0],1))
y = X @ theta + eta
theta_hat = np.linalg.solve(X.T @ X, X.T @ y) # numerically stable solving of theta

# Plot of plane generated by true parameters
fig = plt.figure()
x1,x2 = np.meshgrid(np.linspace(x_min,x_max,10), np.linspace(x_min,x_max,10))
z = theta[0] + theta[1]*x1 + theta[2]*x2
ax = plt.axes(projection='3d')
ax.scatter(X[:,1], X[:,2], y)
s = ax.plot_surface(x1,x2,z, facecolor='blue', label='True params', alpha=.5)
s._facecolors2d = s._facecolor3d
s._edgecolors2d = s._edgecolor3d

# Plot of plane generated by true parameters
z = theta_hat[0] + theta_hat[1]*x1 + theta_hat[2]*x2
s = ax.plot_surface(x1,x2,z, facecolor='red', label='Estimated params', alpha=.5)
s._facecolors2d = s._facecolor3d
s._edgecolors2d = s._edgecolor3d
ax.set_xlabel("x1")
ax.set_ylabel("x2")
ax.set_zlabel("y")
ax.legend()
plt.show()